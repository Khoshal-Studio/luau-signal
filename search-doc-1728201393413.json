[{"title":"connection","type":0,"sectionRef":"#","url":"/luau-signal/api/connection","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#types","content":" "},{"title":"connection​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#connection","content":"&lt;/&gt; interface connection { Disconnect: (self: connection) → () } A connection object that can be used to disconnect the signal handler. "},{"title":"Functions​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#functions","content":" "},{"title":"Disconnect​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#Disconnect","content":"&lt;/&gt; connection:Disconnect() → () Disconnects the connection from the signal. "},{"title":"immutable_signal","type":0,"sectionRef":"#","url":"/luau-signal/api/immutable_signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#types","content":" "},{"title":"immutable_signal​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#immutable_signal","content":"&lt;/&gt; interface immutable_signal { Connect: ( self: immutable_signal, handler: (...any) → () ) → connection Wait: (self: immutable_signal) → ...any Once: ( self: immutable_signal, handler: (...any) → () ) → connection } A signal object that can be connected to but does not have DisconnectAll or Fire methods. "},{"title":"Functions​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Connect","content":"&lt;/&gt; immutable_signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"Wait​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; immutable_signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Once","content":"&lt;/&gt; immutable_signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"restricted_signal","type":0,"sectionRef":"#","url":"/luau-signal/api/restricted_signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#types","content":" "},{"title":"restricted_signal​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#restricted_signal","content":"&lt;/&gt; interface restricted_signal { Connect: ( self: restricted_signal, handler: (...any) → () ) → connection DisconnectAll: (self: restricted_signal) → () Wait: (self: restricted_signal) → ...any Once: ( self: restricted_signal, handler: (...any) → () ) → connection Immutable: immutable_signal } A signal object that can be connected to but does not have the Fire method. "},{"title":"Properties​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#properties","content":" "},{"title":"Immutable​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Immutable","content":"&lt;/&gt; restricted_signal.Immutable: immutable_signal An immutable signal object that can only be connected to. "},{"title":"Functions​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Connect","content":"&lt;/&gt; restricted_signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#DisconnectAll","content":"&lt;/&gt; restricted_signal:DisconnectAll() → () Disconnects all handler functions from the signal.  "},{"title":"Wait​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; restricted_signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Once","content":"&lt;/&gt; restricted_signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"signal","type":0,"sectionRef":"#","url":"/luau-signal/api/signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#types","content":" "},{"title":"signal​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#signal","content":"&lt;/&gt; interface signal { Connect: ( self: signal, handler: (...any) → () ) → connection DisconnectAll: (self: signal) → () Fire: ( self: signal, ...any ) → () Wait: (self: signal) → ...any Once: ( self: signal, handler: (...any) → () ) → connection Restricted: restricted_signal Immutable: immutable_signal } A signal object that can be connected to and fired. "},{"title":"Properties​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#properties","content":" "},{"title":"Restricted​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Restricted","content":"&lt;/&gt; signal.Restricted: restricted_signal A restricted signal object that can only be connected to.  "},{"title":"Immutable​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Immutable","content":"&lt;/&gt; signal.Immutable: immutable_signal An immutable signal object that can only be connected to. "},{"title":"Functions​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Connect","content":"&lt;/&gt; signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#DisconnectAll","content":"&lt;/&gt; signal:DisconnectAll() → () Disconnects all handler functions from the signal.  "},{"title":"Fire​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Fire","content":"&lt;/&gt; signal:Fire(...: any) → () Fires the signal with the given arguments.  "},{"title":"Wait​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Once","content":"&lt;/&gt; signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"Intro","type":0,"sectionRef":"#","url":"/luau-signal/docs/intro","content":"","keywords":""},{"title":"Table of Contents​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#table-of-contents","content":"Installation Roblox Studio Releases PageToolboxBuild from Source Rojo Usage Examples "},{"title":"Installation​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#installation","content":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#roblox-studio","content":"Releases Page​ Head to the Releases Page on Github and download the signal.rbxm file attached from the latest release. You can then drag this file from your file explorer into the explorer tab in Roblox Studio. Toolbox​ On a browser, go the Marketplace Asset page for the signal module and add the free asset to your toolbox. In Roblox Studio Build from Source​ Alternatively you can build the module yourself by cloning the repository with the command git clone https://github.com/Khoshal-Studio/luau-signal.git and then running the command rojo build --output signal.rbxl. This requires the Rojo 7.4 CLI. "},{"title":"Rojo​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#rojo","content":"You can clone the repository and simply copy the src directory and place it into your Rojo project. You should rename the folder from &quot;src&quot; to something more suitable such as &quot;signal&quot;. "},{"title":"Usage​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#usage","content":"The signal module returns a function that creates a new signal object. The API is identical to the Roblox RBXScriptSignal class, with the addition of the Immutable and Restricted interfaces, which are stored as properties of the signal object. Refer to the API Documentation for more information. "},{"title":"Examples​","type":1,"pageTitle":"Intro","url":"/luau-signal/docs/intro#examples","content":"local signal = require(path.to.signal) local mySignal = signal() mySignal:Connect(function() print(&quot;Hello, World!&quot;) end)  local DiedSignal = signal() local Restricted = DiedSignal.Restricted local Immutable = DiedSignal.Immutable local NPC = { Health = 100, Died = Immutable, -- cannot by fired by external code } DiedSignal:Connect(function() print(&quot;NPC has died!&quot;) end)  "}]
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[469],{91998:e=>{e.exports=JSON.parse('{"functions":[{"name":"Connect","desc":"Connects a handler function to the signal.","params":[{"name":"handler","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"connection"}],"function_type":"method","source":{"line":14,"path":"src/docs/immutable_signal.luau"}},{"name":"Wait","desc":"Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.","params":[],"returns":[{"desc":"","lua_type":"...any"}],"function_type":"method","yields":true,"source":{"line":23,"path":"src/docs/immutable_signal.luau"}},{"name":"Once","desc":"Connects a handler function to the signal that will only be called once.","params":[{"name":"handler","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"connection"}],"function_type":"method","source":{"line":32,"path":"src/docs/immutable_signal.luau"}}],"properties":[],"types":[{"name":"immutable_signal","desc":"A signal object that can be connected to but does not have DisconnectAll or Fire methods.","fields":[{"name":"Connect","lua_type":"(self: immutable_signal, handler: (...any) -> ()) -> connection","desc":""},{"name":"Wait","lua_type":"(self: immutable_signal) -> ...any","desc":""},{"name":"Once","lua_type":"(self: immutable_signal, handler: (...any) -> ()) -> connection","desc":""}],"source":{"line":50,"path":"src/docs/types.luau"}}],"name":"immutable_signal","desc":"An immutable signal object that can only be connected to.","source":{"line":5,"path":"src/docs/immutable_signal.luau"}}')}}]);
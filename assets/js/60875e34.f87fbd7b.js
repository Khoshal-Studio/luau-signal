"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[554],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),p=i,m=d["".concat(s,".").concat(p)]||d[p]||g[p]||l;return t?a.createElement(m,r(r({ref:n},u),{},{components:t})):a.createElement(m,r({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},66351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const l={sidebar_position:1},r="Tutorial",o={unversionedId:"tutorial",id:"tutorial",title:"Tutorial",description:"This tutorial will guide you through the usage of the signal module, which provides a robust mechanism for event handling in Luau. The module includes several classes: signal, restrictedsignal, immutablesignal, and connection.",source:"@site/docs/tutorial.md",sourceDirName:".",slug:"/tutorial",permalink:"/luau-signal/docs/tutorial",draft:!1,editUrl:"https://github.com/Khoshal-Studio/luau-signal/edit/master/docs/tutorial.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Intro",permalink:"/luau-signal/docs/intro"}},s={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Setting Up",id:"setting-up",level:2},{value:"Using Signals",id:"using-signals",level:2},{value:"Creating a Signal",id:"creating-a-signal",level:3},{value:"Connecting to a Signal",id:"connecting-to-a-signal",level:3},{value:"Firing a Signal",id:"firing-a-signal",level:3},{value:"Waiting for a Signal",id:"waiting-for-a-signal",level:3},{value:"Connecting Once",id:"connecting-once",level:3},{value:"Restricted and Immutable Signals",id:"restricted-and-immutable-signals",level:2},{value:"Restricted Signals",id:"restricted-signals",level:3},{value:"Immutable Signals",id:"immutable-signals",level:3},{value:"Managing Connections",id:"managing-connections",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c},d="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial"},"Tutorial"),(0,i.kt)("p",null,"This tutorial will guide you through the usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"signal")," module, which provides a robust mechanism for event handling in Luau. The module includes several classes: ",(0,i.kt)("inlineCode",{parentName:"p"},"signal"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"restricted_signal"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"immutable_signal"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"connection"),"."),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#setting-up"},"Setting Up")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#using-signals"},"Using Signals"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#connecting-to-a-signal"},"Connecting to a Signal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#firing-a-signal"},"Firing a Signal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#waiting-for-a-signal"},"Waiting for a Signal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#connecting-once"},"Connecting Once")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#restricted-and-immutable-signals"},"Restricted and Immutable Signals")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#managing-connections"},"Managing Connections")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#conclusion"},"Conclusion"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signal")," module provides a way to create and manage events. It allows you to connect handler functions to signals, fire signals, and manage connections."),(0,i.kt)("h2",{id:"setting-up"},"Setting Up"),(0,i.kt)("p",null,"First, ensure you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"signal")," module available in your project. You can include it in your script as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local signal = require(path.to.signal)\n")),(0,i.kt)("h2",{id:"using-signals"},"Using Signals"),(0,i.kt)("h3",{id:"creating-a-signal"},"Creating a Signal"),(0,i.kt)("p",null,"The signal module returns a void function (no arguments) that can be quickly called to create a new signal class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local mySignal = signal()\n")),(0,i.kt)("h3",{id:"connecting-to-a-signal"},"Connecting to a Signal"),(0,i.kt)("p",null,"To connect a handler function to a signal, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connect")," method. This method returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"connection")," object that can be used to disconnect the handler later."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local mySignal = signal()\n\nlocal connection = mySignal:Connect(function(...)\n    print("Signal fired with arguments:", ...)\nend)\n')),(0,i.kt)("h3",{id:"firing-a-signal"},"Firing a Signal"),(0,i.kt)("p",null,"To fire a signal and call all connected handlers, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Fire")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'mySignal:Fire("Hello", "World")\n')),(0,i.kt)("h3",{id:"waiting-for-a-signal"},"Waiting for a Signal"),(0,i.kt)("p",null,"You can wait for a signal to be fired using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Wait")," method. This method yields until the signal is fired and then returns the arguments passed to the signal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local arg1, arg2 = mySignal:Wait()\nprint("Signal waited for and received:", arg1, arg2)\n')),(0,i.kt)("h3",{id:"connecting-once"},"Connecting Once"),(0,i.kt)("p",null,"To connect a handler that will only be called once, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Once")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'mySignal:Once(function(...)\n    print("This will only be printed once:", ...)\nend)\n')),(0,i.kt)("h2",{id:"restricted-and-immutable-signals"},"Restricted and Immutable Signals"),(0,i.kt)("h3",{id:"restricted-signals"},"Restricted Signals"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"restricted_signal")," can be connected to and waited on, but it cannot be fired directly. This is useful for creating signals that should only be fired by specific parts of your code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local restrictedSignal = Signal.Restricted.new()\n\nrestrictedSignal:Connect(function(...)\n    print("Restricted signal fired with arguments:", ...)\nend)\n')),(0,i.kt)("h3",{id:"immutable-signals"},"Immutable Signals"),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"immutable_signal")," can be connected to and waited on, but it cannot be fired or disconnected. This is useful for creating signals that should remain constant throughout the lifetime of your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local immutableSignal = Signal.Immutable.new()\n\nimmutableSignal:Connect(function(...)\n    print("Immutable signal fired with arguments:", ...)\nend)\n')),(0,i.kt)("h2",{id:"managing-connections"},"Managing Connections"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"connection")," object returned by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connect")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Once")," methods can be used to disconnect the handler from the signal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"connection:Disconnect()\n")),(0,i.kt)("p",null,"To disconnect all handlers from a signal, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"DisconnectAll")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"mySignal:DisconnectAll()\n")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signal")," module provides a powerful and flexible way to handle events in Luau. By understanding how to use signals, restricted signals, immutable signals, and connections, you can create robust and maintainable event-driven code."))}g.isMDXComponent=!0}}]);
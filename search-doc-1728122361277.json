[{"title":"connection","type":0,"sectionRef":"#","url":"/luau-signal/api/connection","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#types","content":" "},{"title":"connection​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#connection","content":"&lt;/&gt; interface connection { Disconnect: (self: connection) → () } A connection object that can be used to disconnect the signal handler. "},{"title":"Functions​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#functions","content":" "},{"title":"Disconnect​","type":1,"pageTitle":"connection","url":"/luau-signal/api/connection#Disconnect","content":"&lt;/&gt; connection:Disconnect() → () Disconnects the connection from the signal. "},{"title":"restricted_signal","type":0,"sectionRef":"#","url":"/luau-signal/api/restricted_signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#types","content":" "},{"title":"restricted_signal​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#restricted_signal","content":"&lt;/&gt; interface restricted_signal { Connect: ( self: restricted_signal, handler: (...any) → () ) → connection DisconnectAll: (self: restricted_signal) → () Wait: (self: restricted_signal) → ...any Once: ( self: restricted_signal, handler: (...any) → () ) → connection Immutable: immutable_signal } A signal object that can be connected to but does not have the Fire method. "},{"title":"Functions​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Connect","content":"&lt;/&gt; restricted_signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#DisconnectAll","content":"&lt;/&gt; restricted_signal:DisconnectAll() → () Disconnects all handler functions from the signal.  "},{"title":"Wait​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; restricted_signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"restricted_signal","url":"/luau-signal/api/restricted_signal#Once","content":"&lt;/&gt; restricted_signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"Intro","type":0,"sectionRef":"#","url":"/luau-signal/docs/intro","content":"Intro This is a test introduction page.","keywords":""},{"title":"immutable_signal","type":0,"sectionRef":"#","url":"/luau-signal/api/immutable_signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#types","content":" "},{"title":"immutable_signal​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#immutable_signal","content":"&lt;/&gt; interface immutable_signal { Connect: ( self: immutable_signal, handler: (...any) → () ) → connection Wait: (self: immutable_signal) → ...any Once: ( self: immutable_signal, handler: (...any) → () ) → connection } A signal object that can be connected to but does not have DisconnectAll or Fire methods. "},{"title":"Functions​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Connect","content":"&lt;/&gt; immutable_signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"Wait​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; immutable_signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"immutable_signal","url":"/luau-signal/api/immutable_signal#Once","content":"&lt;/&gt; immutable_signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"signal","type":0,"sectionRef":"#","url":"/luau-signal/api/signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#types","content":" "},{"title":"signal​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#signal","content":"&lt;/&gt; interface signal { Connect: ( self: signal, handler: (...any) → () ) → connection DisconnectAll: (self: signal) → () Fire: ( self: signal, ...any ) → () Wait: (self: signal) → ...any Once: ( self: signal, handler: (...any) → () ) → connection Restricted: restricted_signal Immutable: immutable_signal } A signal object that can be connected to and fired. "},{"title":"Properties​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#properties","content":" "},{"title":"Restricted​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Restricted","content":"&lt;/&gt; signal.Restricted: restricted_signal A restricted signal object that can only be connected to.  "},{"title":"Immutable​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Immutable","content":"&lt;/&gt; signal.Immutable: immutable_signal An immutable signal object that can only be connected to. "},{"title":"Functions​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Connect","content":"&lt;/&gt; signal:Connect(handler: (...any) → ()) → connection Connects a handler function to the signal.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#DisconnectAll","content":"&lt;/&gt; signal:DisconnectAll() → () Disconnects all handler functions from the signal.  "},{"title":"Fire​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Fire","content":"&lt;/&gt; signal:Fire(...: any) → () Fires the signal with the given arguments.  "},{"title":"Wait​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; signal:Wait() → ...any Waits for the signal to be fired and returns the arguments that were passed to the signal when it was fired.  "},{"title":"Once​","type":1,"pageTitle":"signal","url":"/luau-signal/api/signal#Once","content":"&lt;/&gt; signal:Once(handler: (...any) → ()) → connection Connects a handler function to the signal that will only be called once. "},{"title":"Tutorial","type":0,"sectionRef":"#","url":"/luau-signal/docs/tutorial","content":"","keywords":""},{"title":"Table of Contents​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#table-of-contents","content":"IntroductionSetting UpUsing Signals Connecting to a SignalFiring a SignalWaiting for a SignalConnecting Once Restricted and Immutable SignalsManaging ConnectionsConclusion "},{"title":"Introduction​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#introduction","content":"The signal module provides a way to create and manage events. It allows you to connect handler functions to signals, fire signals, and manage connections. "},{"title":"Setting Up​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#setting-up","content":"First, ensure you have the signal module available in your project. You can include it in your script as follows: local signal = require(path.to.signal)  "},{"title":"Using Signals​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#using-signals","content":""},{"title":"Creating a Signal​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#creating-a-signal","content":"The signal module returns a void function (no arguments) that can be quickly called to create a new signal class. local mySignal = signal()  "},{"title":"Connecting to a Signal​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#connecting-to-a-signal","content":"To connect a handler function to a signal, use the Connect method. This method returns a connection object that can be used to disconnect the handler later. local mySignal = signal() local connection = mySignal:Connect(function(...) print(&quot;Signal fired with arguments:&quot;, ...) end)  "},{"title":"Firing a Signal​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#firing-a-signal","content":"To fire a signal and call all connected handlers, use the Fire method. mySignal:Fire(&quot;Hello&quot;, &quot;World&quot;)  "},{"title":"Waiting for a Signal​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#waiting-for-a-signal","content":"You can wait for a signal to be fired using the Wait method. This method yields until the signal is fired and then returns the arguments passed to the signal. local arg1, arg2 = mySignal:Wait() print(&quot;Signal waited for and received:&quot;, arg1, arg2)  "},{"title":"Connecting Once​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#connecting-once","content":"To connect a handler that will only be called once, use the Once method. mySignal:Once(function(...) print(&quot;This will only be printed once:&quot;, ...) end)  "},{"title":"Restricted and Immutable Signals​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#restricted-and-immutable-signals","content":""},{"title":"Restricted Signals​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#restricted-signals","content":"A restricted_signal can be connected to and waited on, but it cannot be fired directly. This is useful for creating signals that should only be fired by specific parts of your code. local restrictedSignal = Signal.Restricted.new() restrictedSignal:Connect(function(...) print(&quot;Restricted signal fired with arguments:&quot;, ...) end)  "},{"title":"Immutable Signals​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#immutable-signals","content":"An immutable_signal can be connected to and waited on, but it cannot be fired or disconnected. This is useful for creating signals that should remain constant throughout the lifetime of your application. local immutableSignal = Signal.Immutable.new() immutableSignal:Connect(function(...) print(&quot;Immutable signal fired with arguments:&quot;, ...) end)  "},{"title":"Managing Connections​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#managing-connections","content":"The connection object returned by the Connect and Once methods can be used to disconnect the handler from the signal. connection:Disconnect()  To disconnect all handlers from a signal, use the DisconnectAll method. mySignal:DisconnectAll()  "},{"title":"Conclusion​","type":1,"pageTitle":"Tutorial","url":"/luau-signal/docs/tutorial#conclusion","content":"The signal module provides a powerful and flexible way to handle events in Luau. By understanding how to use signals, restricted signals, immutable signals, and connections, you can create robust and maintainable event-driven code. "}]